#include <ESP8266WiFi.h> // Ensure this library is installed

// WiFi credentials
const char* ssid = "ESP";          // Replace with your WiFi SSID
const char* password = "12345678";  // Replace with your WiFi password

WiFiServer server(80); // Initialize server on port 80

void setup() {
  Serial.begin(115200);
  delay(10);

  // Connect to WiFi
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // Start the server
  server.begin();
  Serial.println("Server started");
}

void loop() {
  WiFiClient client = server.available(); // Check if a client has connected
  if (!client) {
    return;
  }

  Serial.println("New Client.");
  String currentLine = ""; // To store incoming data
  while (client.connected()) {
    if (client.available()) {
      char c = client.read();
      Serial.write(c);

      if (c == '\n') {
        // If the line is blank, the HTTP request has ended
        if (currentLine.length() == 0) {
          // Send an HTTP response
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          client.println("<h1>Motor Control</h1>");
          client.println("<button onclick=\"sendCommand('f')\">Forward</button>");
          client.println("<button onclick=\"sendCommand('b')\">Backward</button>");
          client.println("<button onclick=\"sendCommand('s')\">Stop</button>");
          client.println("<script>");
          client.println("function sendCommand(cmd) { fetch('/' + cmd); }");
          client.println("</script>");
          client.println("</html>");
          break;
        } else {
          // Parse the HTTP request
          if (currentLine.startsWith("GET /f")) {
            Serial.println("Command: Forward");
          } else if (currentLine.startsWith("GET /b")) {
            Serial.println("Command: Backward");
          } else if (currentLine.startsWith("GET /s")) {
            Serial.println("Command: Stop");
          }
          currentLine = ""; // Clear the line after parsing
        }
      } else if (c != '\r') {
        currentLine += c;
      }
    }
  }
  client.stop();
  Serial.println("Client disconnected.");
}
